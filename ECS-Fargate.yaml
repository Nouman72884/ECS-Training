---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  ECS Cluster Using Fargate

Parameters:
  VpcCIDR:
    Description: Please enter the IP range     # optional
    Type: String     # required
    Default: 10.1.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.2.0/24


  PrivateSubnet1CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.3.0/24


  PrivateSubnet2CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.4.0/24

  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.

Resources:

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ECSRole
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ecs.amazonaws.com
              - ec2.amazonaws.com
              - ecs-tasks.amazonaws.com
              - application-autoscaling.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::020046395185:policy/ECSFullAccessPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR     # required
      InstanceTenancy: default      # optional

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone:  !Select [ 0, !GetAZs '' ]     # optional
      CidrBlock: !Ref PublicSubnet1CIDR     # required
      MapPublicIpOnLaunch: true     # optional
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PublicSubnet1     # optional


  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone: !Select [ 1, !GetAZs '' ]     # optional
      CidrBlock: !Ref PublicSubnet2CIDR     # required
      MapPublicIpOnLaunch: true     # optional
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PublicSubnet2     # optional



  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone: !Select [ 0, !GetAZs '' ]     # optional
      CidrBlock: !Ref PrivateSubnet1CIDR    # required
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PrivateSubnet1     # optional


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone: !Select [ 1, !GetAZs '' ]     # optional
      CidrBlock: !Ref PrivateSubnet2CIDR    # required
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PrivateSubnet2     # optional

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: InternetGateway     # optional

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway    # optional
      VpcId: !Ref VPC     # required


  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGWEIP.AllocationId     # required
      SubnetId: !Ref PublicSubnet1     # required


  NatGWEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: Public_Route_Table     # optional
      VpcId: !Ref VPC      # required



  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private_Route_Table


  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSCluster     # optional

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         SourceSecurityGroupId: !GetAtt ALBSG.GroupId
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 10.1.0.0/16
      SecurityGroupEgress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 0.0.0.0/0

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow All Traffic to Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      IpAddressType: ipv4     # optional
      #LoadBalancerAttributes:                # optional, list of LoadBalancerAttribute
      #  - LoadBalancerAttribute
      #Name: ALB     # optional
      Scheme: internet-facing     # optional
      SecurityGroups:
        -  Fn::GetAtt: [ ALBSG, GroupId ]             # optional, list of String
      Subnets:                # optional, list of String
        -  Ref: PublicSubnet1
        -  Ref: PublicSubnet2
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: ALB     # optional

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:                # required, list of Action
        - Type:  forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB     # required
      Port: 80     # required
      Protocol: HTTP     # required

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 100
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 70
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPath: /
      Name: TargetGroup     # optional
      Port: 80     # required
      Protocol: HTTP     # required
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: TargetGroup     # optional
      TargetType: ip
      VpcId: !Ref VPC     # required

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: Wordpress-SVC
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc     # optional
      TaskRoleArn: !Ref ECSRole
      ExecutionRoleArn: !Ref ECSRole
      ContainerDefinitions:
        - Name: Wordpress
          DependsOn:
            -  Condition: START
               ContainerName: db
          # Links:
          #   - db
          Cpu: '256'
          Essential: 'true'
          Image: wordpress:latest
          Memory: '300'
          PortMappings:
            -
              ContainerPort: 80
              #HostPort: 80
              Protocol: tcp
          Environment:
            - Name: WORDPRESS_DB_HOST
              Value: 127.0.0.1
            - Name: WORDPRESS_DB_USER
              Value: wordpress
            - Name: WORDPRESS_DB_PASSWORD
              Value: wordpress
            - Name: WORDPRESS_DB_NAME
              Value: wordpress

        - Name: db
          Cpu: '256'
          Image: mysql:5.7
          Memory: '400'
          PortMappings:
            -
              ContainerPort: 3306
              #HostPort: 3306
              Protocol: tcp
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: password
            - Name: MYSQL_DATABASE
              Value: wordpress
            - Name: MYSQL_USER
              Value: wordpress
            - Name: MYSQL_PASSWORD
              Value: wordpress


  service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: 'wordpress-ser'
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      # DeploymentConfiguration:
      #   MaximumPercent: 200
      #   MinimumHealthyPercent: 100
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 120
      TaskDefinition: !Ref 'taskdefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref EcsSecurityGroup
      LoadBalancers:
        - ContainerName: 'Wordpress'
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroup'
