---
AWSTemplateFormatVersion: "2010-09-09"

Description: >



Parameters:
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.

  PrivateSubnet1:
      Description: Please enter the IP range     # optional
      Type: String     # required

  PrivateSubnet2:
      Description: Please enter the IP range     # optional
      Type: String     # required

  TargetGroup:
      Description: Please enter the IP range     # optional
      Type: String     # required

  EcsSecurityGroup:
      Description: Please enter the IP range     # optional
      Type: String     # required

Resources:
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ECSRole
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ecs.amazonaws.com
              - ec2.amazonaws.com
              - ecs-tasks.amazonaws.com
              - application-autoscaling.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::020046395185:policy/ECSFullAccessPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSCluster     # optional

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: Wordpress-SVC
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc     # optional
      TaskRoleArn: !Ref ECSRole
      ExecutionRoleArn: !Ref ECSRole
      ContainerDefinitions:
        - Name: Wordpress
          DependsOn:
            -  Condition: START
               ContainerName: db
          # Links:
          #   - db
          Cpu: '256'
          Essential: 'true'
          Image: wordpress:latest
          Memory: '300'
          PortMappings:
            -
              ContainerPort: 80
              #HostPort: 80
              Protocol: tcp
          Environment:
            - Name: WORDPRESS_DB_HOST
              Value: 127.0.0.1
            - Name: WORDPRESS_DB_USER
              Value: wordpress
            - Name: WORDPRESS_DB_PASSWORD
              Value: wordpress
            - Name: WORDPRESS_DB_NAME
              Value: wordpress

        - Name: db
          Cpu: '256'
          Image: mysql:5.7
          Memory: '400'
          PortMappings:
            -
              ContainerPort: 3306
              #HostPort: 3306
              Protocol: tcp
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: password
            - Name: MYSQL_DATABASE
              Value: wordpress
            - Name: MYSQL_USER
              Value: wordpress
            - Name: MYSQL_PASSWORD
              Value: wordpress


  service:
    Type: AWS::ECS::Service
    DependsOn: taskdefinition
    Properties:
      ServiceName: 'wordpress-ser'
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      # DeploymentConfiguration:
      #   MaximumPercent: 200
      #   MinimumHealthyPercent: 100
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 120
      TaskDefinition: !Ref 'taskdefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref EcsSecurityGroup
      LoadBalancers:
        - ContainerName: 'Wordpress'
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroup'
