---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Template to launch EC2 based ECS cluster and deploy wordpress

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.

  VpcCIDR:
    Description: Please enter the IP range     # optional
    Type: String     # required
    Default: 10.1.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.2.0/24


  PrivateSubnet1CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.3.0/24


  PrivateSubnet2CIDR:
    Description: Please enter IP range     # optional
    Type: String     # required
    Default: 10.1.4.0/24

  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.

  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.


Resources:

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'ECSRole']

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ECSRole
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ecs.amazonaws.com
              - ec2.amazonaws.com
              - ecs-tasks.amazonaws.com
              - application-autoscaling.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::020046395185:policy/ECSFullAccessPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /


  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR     # required
      InstanceTenancy: default      # optional

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone:  !Select [ 0, !GetAZs '' ]     # optional
      CidrBlock: !Ref PublicSubnet1CIDR     # required
      MapPublicIpOnLaunch: true     # optional
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PublicSubnet1     # optional


  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone: !Select [ 1, !GetAZs '' ]     # optional
      CidrBlock: !Ref PublicSubnet2CIDR     # required
      MapPublicIpOnLaunch: true     # optional
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PublicSubnet2     # optional



  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone: !Select [ 0, !GetAZs '' ]     # optional
      CidrBlock: !Ref PrivateSubnet1CIDR    # required
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PrivateSubnet1     # optional


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC     # required
      AvailabilityZone: !Select [ 1, !GetAZs '' ]     # optional
      CidrBlock: !Ref PrivateSubnet2CIDR    # required
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: PrivateSubnet2     # optional

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: InternetGateway     # optional

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway    # optional
      VpcId: !Ref VPC     # required


  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGWEIP.AllocationId     # required
      SubnetId: !Ref PublicSubnet1     # required


  NatGWEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: Public_Route_Table     # optional
      VpcId: !Ref VPC      # required



  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private_Route_Table


  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSCluster     # optional

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref  ContainerInstances     # optional
      #LoadBalancerNames:                # optional, list of String
      #  - Fn::GetAtt: [ ALB, AllocationId ]
      MaxSize: '2'    # required
      MinSize: '1'     # required
      DesiredCapacity: !Ref DesiredCapacity
      Tags:                # optional, list of TagProperty
        - Key: Name     # optional
          Value: ECS_Nouman  # optional
          PropagateAtLaunch: true
      TargetGroupARNs:
        -  Ref: TargetGroup

      VPCZoneIdentifier:                # optional, list of String
        -  Ref: PrivateSubnet1
        -  Ref: PrivateSubnet2

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         SourceSecurityGroupId: !GetAtt ALBSG.GroupId
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 10.1.0.0/16
      SecurityGroupEgress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 0.0.0.0/0
  # EcsSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: ECS Security Group
  #     VpcId: !Ref VPC
  # EcsSecurityGroupHTTPinbound:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'EcsSecurityGroup'
  #     IpProtocol: -1
  #     FromPort: '0'
  #     ToPort: '65535'
  #     CidrIp: 0.0.0.0/0
  # EcsSecurityGroupALBports:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'EcsSecurityGroup'
  #     IpProtocol: -1
  #     FromPort: '0'
  #     ToPort: '65535'
  #     SourceSecurityGroupId: !GetAtt ALBSG.GroupId

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow All Traffic to Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
       - IpProtocol: -1
         FromPort: 0
         ToPort: 65535
         CidrIp: 0.0.0.0/0

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - EC2
      Family: Wordpress-SVC
      NetworkMode: bridge     # optional
      TaskRoleArn: !Ref ECSRole
      ExecutionRoleArn: !Ref ECSRole
      ContainerDefinitions:
        - Name: Wordpress
          # DependsOn:
          #   -  Condition: START
          #      ContainerName: db
          Links:
            - db
          Cpu: '256'
          Essential: 'true'
          Image: wordpress:latest
          Memory: '300'
          PortMappings:
            -
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Environment:
            - Name: WORDPRESS_DB_HOST
              Value: db
            - Name: WORDPRESS_DB_USER
              Value: wordpress
            - Name: WORDPRESS_DB_PASSWORD
              Value: wordpress
            - Name: WORDPRESS_DB_NAME
              Value: wordpress

        - Name: db
          Cpu: '256'
          Image: mysql:5.7
          Memory: '400'
          PortMappings:
            -
              ContainerPort: 3306
              HostPort: 3306
              Protocol: tcp
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: password
            - Name: MYSQL_DATABASE
              Value: wordpress
            - Name: MYSQL_USER
              Value: wordpress
            - Name: MYSQL_PASSWORD
              Value: wordpress



  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      IpAddressType: ipv4     # optional
      #LoadBalancerAttributes:                # optional, list of LoadBalancerAttribute
      #  - LoadBalancerAttribute
      #Name: ALB     # optional
      Scheme: internet-facing     # optional
      SecurityGroups:
        -  Fn::GetAtt: [ ALBSG, GroupId ]             # optional, list of String
      Subnets:                # optional, list of String
        -  Ref: PublicSubnet1
        -  Ref: PublicSubnet2
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: ALB     # optional


  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:                # required, list of Action
        - Type:  forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB     # required
      Port: 80     # required
      Protocol: HTTP     # required

  # ECSALBListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   DependsOn: ALBListener
  #   Properties:
  #     Actions:
  #     - Type: forward
  #       TargetGroupArn: !Ref 'TargetGroup'
  #     Conditions:
  #     - Field: path-pattern
  #       Values: [/]
  #     ListenerArn: !Ref 'ALBListener'
  #     Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: traffic-port     # optional
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPath: /
      Name: TargetGroup     # optional
      Port: 80     # required
      Protocol: HTTP     # required
      Tags:                # optional, list of Tag
        - Key: Name     # optional
          Value: TargetGroup     # optional
      VpcId: !Ref VPC     # required


  service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: 'wordpress-service'
      Cluster: !Ref 'ECSCluster'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 60
      TaskDefinition: !Ref 'taskdefinition'
      LaunchType: 'EC2'
      LoadBalancers:
        - ContainerName: 'Wordpress'
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroup'



# # #Outputs:
